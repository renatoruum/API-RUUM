/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as ElevenLabs from "../../../../../index";
export declare namespace Agents {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | environments.ElevenLabsEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Agents {
    protected readonly _options: Agents.Options;
    constructor(_options?: Agents.Options);
    /**
     * Run a conversation between the agent and a simulated user.
     *
     * @param {string} agentId - The id of an agent. This is returned on agent creation.
     * @param {ElevenLabs.conversationalAi.BodySimulatesAConversationV1ConvaiAgentsAgentIdSimulateConversationPost} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.agents.simulateConversation("21m00Tcm4TlvDq8ikWAM", {
     *         simulation_specification: {
     *             simulated_user_config: {
     *                 first_message: "Hello, how can I help you today?",
     *                 language: "en"
     *             }
     *         }
     *     })
     */
    simulateConversation(agentId: string, request: ElevenLabs.conversationalAi.BodySimulatesAConversationV1ConvaiAgentsAgentIdSimulateConversationPost, requestOptions?: Agents.RequestOptions): Promise<ElevenLabs.AgentSimulatedChatTestResponseModel>;
    /**
     * Run a conversation between the agent and a simulated user and stream back the response. Response is streamed back as partial lists of messages that should be concatenated and once the conversation has complete a single final message with the conversation analysis will be sent.
     *
     * @param {string} agentId - The id of an agent. This is returned on agent creation.
     * @param {ElevenLabs.conversationalAi.BodySimulatesAConversationStreamV1ConvaiAgentsAgentIdSimulateConversationStreamPost} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.agents.simulateConversationStream("21m00Tcm4TlvDq8ikWAM", {
     *         simulation_specification: {
     *             simulated_user_config: {
     *                 first_message: "Hello, how can I help you today?",
     *                 language: "en"
     *             }
     *         }
     *     })
     */
    simulateConversationStream(agentId: string, request: ElevenLabs.conversationalAi.BodySimulatesAConversationStreamV1ConvaiAgentsAgentIdSimulateConversationStreamPost, requestOptions?: Agents.RequestOptions): Promise<void>;
}
